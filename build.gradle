//file:noinspection GradlePackageVersionRange
plugins {
    id "dev.architectury.loom" version "1.7.410"
    id 'maven-publish'
}

base {
    archivesName = project.archives_base_name
}

allprojects {
    apply plugin: "java"
    apply plugin: "dev.architectury.loom"
    apply plugin: "maven-publish"

    def ENV = System.getenv()

    version = "${project.mod_version}+${rootProject.minecraft_base_version}"
    group = rootProject.maven_group

    repositories {
        maven { url 'https://maven.neoforged.net/releases/' }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.layered {
            it.mappings("net.fabricmc:yarn:${rootProject.yarn_mappings}:v2")
            it.mappings("dev.architectury:yarn-mappings-patch-neoforge:1.21+build.4")
        }
        //modImplementation "net.fabricmc:fabric-loader:${rootProject.loader_version}"

        neoForge "net.neoforged:neoforge:${project.neoforge_version}"
        //modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    }

    processResources {
        inputs.property "version", project.version
        filteringCharset "UTF-8"

        filesMatching("META-INF/neoforge.mods.toml") {
            expand "version": project.version
        }
    }

    def targetJavaVersion = 21
    tasks.withType(JavaCompile).configureEach {
        // ensure that the encoding is set to UTF-8, no matter what the system default is
        // this fixes some edge cases with special characters not displaying correctly
        // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
        // If Javadoc is generated, this must be specified in that task too.
        it.options.encoding = "UTF-8"
        if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
            it.options.release = targetJavaVersion
        }
    }

    java {
        def javaVersion = JavaVersion.toVersion(targetJavaVersion)
        if (JavaVersion.current() < javaVersion) {
            toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
        }
        archivesBaseName = project.archives_base_name
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()
    }

    jar {
        from("LICENSE") {
            rename { "${it}_${project.archivesBaseName}" }
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }

        repositories {
            maven {
                url ENV.MAVEN_URL
                credentials {
                    username ENV.MAVEN_USER
                    password ENV.MAVEN_PASSWORD
                }
            }
        }
    }
}

repositories {
    maven { url "https://maven.terraformersmc.com/releases/" }
    maven { url "https://maven.shedaniel.me/" }
    maven {
        url "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven { url "https://maven.nucleoid.xyz/" }
    maven { url 'https://maven.wispforest.io/releases' }
    maven { url "https://maven.su5ed.dev/releases" }
    mavenLocal()
}

sourceSets {
    testmod {
        runtimeClasspath += main.runtimeClasspath
        compileClasspath += main.compileClasspath
    }
}

loom {
    runs {
        testmodClient {
            client()
            ideConfigGenerated project.rootProject == project
            name = "Testmod Client"
            mods {
                create("uwu") {
                    sourceSet sourceSets.testmod
                }
                create("owo"){
                    sourceSet sourceSets.main
                }
            }
            source sourceSets.testmod
        }
        testmodServer {
            server()
            ideConfigGenerated project.rootProject == project
            name = "Testmod Server"
            mods {
                create("uwu") {
                    sourceSet sourceSets.testmod
                }
                create("owo"){
                    sourceSet sourceSets.main
                }
            }
            source sourceSets.testmod
        }
    }

    accessWidenerPath = file("src/main/resources/owo.accesswidener")

    neoForge {
//        convertAccessWideners = true
//        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }
}

//remapJar {
//    dependsOn(processResources)
//    atAccessWideners.add("owo_fun.accesswidener")
//}

dependencies {
//    modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}")
    modCompileOnly("me.shedaniel:RoughlyEnoughItems-default-plugin:${project.rei_version}")
    modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-neoforge:${project.rei_version}")

    modCompileOnly("dev.emi:emi-neoforge:${project.emi_version}")
//    modLocalRuntime("dev.emi:emi-fabric:${project.emi_version}")

//    modCompileOnly("com.terraformersmc:modmenu:${project.modmenu_version}")
//    modLocalRuntime("com.terraformersmc:modmenu:${project.modmenu_version}")

    include api("io.wispforest:endec:0.1.5")
    include api("io.wispforest.endec:netty:0.1.2")
    include api("io.wispforest.endec:gson:0.1.3")
    include api("io.wispforest.endec:jankson:0.1.3")

    include api(forgeRuntimeLibrary("blue.endless:jankson:${project.jankson_version}"))

//    modCompileOnly("xyz.nucleoid:server-translations-api:${project.stapi_version}")

    include modApi("org.sinytra.forgified-fabric-api:fabric-api-base:0.4.42+d1308dedd1") { exclude group: "fabric-api" }
    include modApi("org.sinytra.forgified-fabric-api:fabric-networking-api-v1:4.2.0+247fd407d1") { exclude group: "fabric-api" }
    include modApi("org.sinytra.forgified-fabric-api:fabric-screen-api-v1:2.0.24+c055723bd1") { exclude group: "fabric-api" }

    testmodImplementation sourceSets.main.output
    testmodAnnotationProcessor sourceSets.main.output
}

javadoc {
    options.stylesheetFile = new File(projectDir, "stylesheet.css")
    options.tags = ["apiNote", "implNote", "implSpec"]
    options.addStringOption("Xdoclint:-missing", "-quiet")
    options.encoding = 'UTF-8'
}
